%: init_swirl {}
%: groups_swirl {}
%: 1wh {{' '}}
%: 1wh {{'
'}}
%: newline {{'
'}}
%: 0wh {}
%: nwh {}
%: nwh {::1wh::nwh}
%: 1nwh {::1wh::nwh}
%: whitespace {::1wh}
%: whitespaces {::1nwh}
%: swirl_inserted_whitespace {::whitespaces}
%: az {a} %: az {b} %: az {c} %: az {d} %: az {e} %: az {f} %: az {g} %: az {h} %: az {i} %: az {j} %: az {k} %: az {l} %: az {m} %: az {n} %: az {o} %: az {p} %: az {q} %: az {r} %: az {s} %: az {t} %: az {u} %: az {v} %: az {w} %: az {x} %: az {y} %: az {z}
%: AZ {A} %: AZ {B} %: AZ {C} %: AZ {D} %: AZ {E} %: AZ {F} %: AZ {G} %: AZ {H} %: AZ {I} %: AZ {J} %: AZ {K} %: AZ {L} %: AZ {M} %: AZ {N} %: AZ {O} %: AZ {P} %: AZ {Q} %: AZ {R} %: AZ {S} %: AZ {T} %: AZ {U} %: AZ {V} %: AZ {W} %: AZ {X} %: AZ {Y} %: AZ {Z}
%: aZ {::az}
%: aZ {::AZ}
%: 09 {0} %: 09 {1} %: 09 {2} %: 09 {3} %: 09 {4} %: 09 {5} %: 09 {6} %: 09 {7} %: 09 {8} %: 09 {9}
%: specialchar {{'!'}}%: specialchar {{'"'}}%: specialchar {{'#'}}%: specialchar {{'$'}}%: specialchar {{'%'}}%: specialchar {{'&'}}%: specialchar {{'''}}%: specialchar {{'('}}%: specialchar {{')'}}%: specialchar {{'*'}}%: specialchar {{'+'}}%: specialchar {{','}}%: specialchar {{'-'}}%: specialchar {{'.'}}%: specialchar {{'/'}}%: specialchar {{':'}}%: specialchar {{';'}}%: specialchar {{'<'}}%: specialchar {{'='}}%: specialchar {{'>'}}%: specialchar {{'?'}}%: specialchar {{'@'}}%: specialchar {{'['}}%: specialchar {{'\'}}%: specialchar {{']'}}%: specialchar {{'^'}}%: specialchar {{'_'}}%: specialchar {{'`'}}%: specialchar {{'{'}}%: specialchar {{'|'}}%: specialchar {{'}'}}%: specialchar {{'~'}}
%: alnum {::aZ}
%: alnum {::09}
%: alnum_ {_}
%: alnum_ {::alnum}
%: opaquechar {::specialchar}
%: opaquechar {::alnum}
%: anychar {::1wh}
%: anychar {::opaquechar}
%: remove_newlines {}
%: remove_newlines {::not_end::remove_newline::remove_newlines}
%: remove_newline {::anychar}
%: remove_newline {::newline} {}
%: not_end (not) {{'END INIT'}}
%-: (call) {::remove_newlines}

%: uint {::09}
%: uint {::09::uint}

%: index_number {::uint th} -> {:}
%: index_number {first} -> {1}
%: index_number {second} -> {2}
%: index_number {third} -> {3}

%/: c_quote {"::c_quote_inner"}
%/: c_quote_inner {}
%/: c_quote_inner {::not_quote_char::c_quote_inner_1::c_quote_inner}
%/: c_quote_inner_1 {::anychar}
%/: c_quote_inner_1 {\:c:anychar} -> {:c}
%/: not_quote_char (not) {"}

%: c_ident {::alnum_}
%: c_ident {::alnum_::c_ident}

%: lean_comment.swirl 

%: reflect.swirl 

%-: (call) {{'END INIT'}} {} END INIT

/for all uses of ::nameless_rule below, flags aren't really supported. so maybe replace them with a checked ::unflagged_nameless_rule version./

%: maybe_nameless_rule {} -> {{}}
%: maybe_nameless_rule {::nameless_rule_arrow_notation}

%: rule_combination {::seq_chain_combination} /1<=simple/
%: rule_combination {::or_chain_combination} /2<=seq/

    %: seq_chain_combination {::rule_combination_simple}
    %: seq_chain_combination {::rule_combination_simple ::seq_chain_combination}

    %: or_chain_combination {::seq_chain_combination or ::seq_chain_combination}
    %: or_chain_combination {::seq_chain_combination or ::or_chain_combination}

    %: rule_combination_simple {::nameless_rule_arrow_notation}
    %: rule_combination_simple {(::rule_combination)::rule_postfix_op}

/unfold/ /{/
    %: unfold {-combination(:r:nameless_rule_remove_arrow_notation) -on(:prefix:c_ident) .} -> {
        %-: :prefix :r
    }

    %: unfold {-combination((:r:rule_combination)) -on(:prefix:c_ident) .} -> {
        %: (call) {'{::unfold}'} -combination(:r) -on(:prefix).
    }

    %: unfold {-combination((:r:rule_combination)?) -on(:prefix:c_ident) .} -> {
        %-: :prefix {}
        %-: :prefix {{'::'}:prefix{''}_maybe}
        %: (call) {{'::unfold'}} -combination(:r) -on(:prefix{''}_maybe).
    }

    %: unfold_arg_postfix {::nwh} -> {_t}
    %: unfold_arg_postfix {-postfix(:p:c_ident) ::nwh} -> {:p}

    / an example sequence chain {first}({second})+ will be unfolded on "prefix" as follows:
      first unfold the subrules:
        %: prefix_s {first}
        %: prefix_ss {second}
        %: prefix_ss {second::prefix_ss}
      then unfold the stem rule:
        %: prefix {::prefix_s::prefix_ss} /

    %: unfold {
        -combination(:head:rule_combination_simple :rest:seq_chain_combination)
        -on(:prefix:c_ident) .
    } -> {
        %: (call) {{'::unfold_seq_subrules'}} -combination(:head :rest) -on(:prefix{''}_s).
        %: (call) {{'::unfold_seq_stemrule'}} -combination(:head :rest) -on(:prefix).
    }

    %: unfold_seq_steminvocs (
        -combination(:head:rule_combination_simple)
        -on(:prefix:c_ident)
    ) {} -> {
        {'::'}:prefix
    }

    %: unfold_seq_steminvocs (
        -combination(:head:rule_combination_simple :rest:seq_chain_combination)
        -on(:prefix:c_ident)
    ) {
        :other_invocs:unfold_seq_steminvocs(-combination(:rest) -on(:prefix{''}s))
    } -> {
        {'::'}:prefix :other_invocs
    }


    %: unfold_seq_stemrule {
        -combination(:head:rule_combination_simple :rest:seq_chain_combination)
        -on(:prefix:c_ident) .
        :invocs:unfold_seq_steminvocs(-combination(:head :rest) -on(:prefix{''}_s))
    } -> {
        %-: :prefix {:invocs}
    }

    %: unfold_seq_subrules {
        -combination(:head:rule_combination_simple)
        -on(:prefix:c_ident) .
    } -> {
        %: (call) {{'::unfold'}} -combination(:head) -on(:prefix).
    }

    %: unfold_seq_subrules {
        -combination(:head:rule_combination_simple :rest:seq_chain_combination)
        -on(:prefix:c_ident) .
    } -> {
        %: (call) {{'::unfold'}} -combination(:head) -on(:prefix).
        %: (call) {{'::unfold_seq_subrules'}} -combination(:rest) -on(:prefix{''}s).
    }

    %: unfold {
        -combination(:head:seq_chain_combination or :tail:seq_chain_combination)
        -on(:prefix:c_ident)
        :postfix:unfold_arg_postfix .
    } -> {
        %: (call) {'{::unfold}'} -combination(:tail) -on(:prefix{''}:postfix{''}t).
        %: (call) {'{::unfold}'} -combination(:head) -on(:prefix{''}:postfix).
        %-: :prefix {{'::'}:prefix{''}:postfix{''}t}
        %-: :prefix {{'::'}:prefix{''}:postfix}
    }

    %: unfold {
        -combination(:head:seq_chain_combination or :rest:or_chain_combination)
        -on(:prefix:c_ident)
        :postfix:unfold_arg_postfix
    } -> {
        %: (call) {'{::unfold}'} -combination(:rest) -on(:prefix) -postfix(:postfix{''}t).
        %: (call) {'{::unfold}'} -combination(:head) -on(:prefix{''}:postfix).
        %-: :prefix {{'::'}:prefix{''}:postfix}
    }
/}/
 
/:ruleName:c_ident = :root:rule_combination/

%: syntax_structured_rule {
    %:! {'structured:'} :ruleName:c_ident = :root:rule_combination
} -> {
    %-: (call) {'{::unfold}'} 
        -combination(:root)
        -on(:ruleName).
}


%: apply_structured_rules {}
%: apply_structured_rules {::apply_structured_rules_1::apply_structured_rules}
%: apply_structured_rules_1 {::anychar}
%: apply_structured_rules_1 {::syntax_structured_rule}

/%: (call) {--::syntax_structured_rule}

--%:! structured: c_quote = {a}
/
end