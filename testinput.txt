// 1 whitespace
%: 1wh { }
%: 1wh {
}
%: newline {
}
// 0 whitespace
%: 0wh {}
%: nwh {}
// n whitespace
%: nwh {::1wh::nwh}

%: az {a} %: az {b} %: az {c} %: az {d} %: az {e} %: az {f} %: az {g} %: az {h} %: az {i} %: az {j} %: az {k} %: az {l} %: az {m} %: az {n} %: az {o} %: az {p} %: az {q} %: az {r} %: az {s} %: az {t} %: az {u} %: az {v} %: az {w} %: az {x} %: az {y} %: az {z}
%: AZ {A} %: AZ {B} %: AZ {C} %: AZ {D} %: AZ {E} %: AZ {F} %: AZ {G} %: AZ {H} %: AZ {I} %: AZ {J} %: AZ {K} %: AZ {L} %: AZ {M} %: AZ {N} %: AZ {O} %: AZ {P} %: AZ {Q} %: AZ {R} %: AZ {S} %: AZ {T} %: AZ {U} %: AZ {V} %: AZ {W} %: AZ {X} %: AZ {Y} %: AZ {Z}
%: aZ {::az}
%: aZ {::AZ}
%: 09 {0} %: 09 {1} %: 09 {2} %: 09 {3} %: 09 {4} %: 09 {5} %: 09 {6} %: 09 {7} %: 09 {8} %: 09 {9}

// non white space special characters
%: specialchar {.!}%: specialchar {."}%: specialchar {.#}%: specialchar {.$}%: specialchar {.%}%: specialchar {.&}%: specialchar {.'}%: specialchar {.(}%: specialchar {.)}%: specialchar {.*}%: specialchar {.+}%: specialchar {.,}%: specialchar {.-}%: specialchar {..}%: specialchar {./}%: specialchar {.:}%: specialchar {.;}%: specialchar {.<}%: specialchar {.=}%: specialchar {.>}%: specialchar {.?}%: specialchar {.@}%: specialchar {.[}%: specialchar {.\}%: specialchar {.]}%: specialchar {.^}%: specialchar {._}%: specialchar {.`}%: specialchar {.{}%: specialchar {.|}%: specialchar {.}}%: specialchar {.~}

%: alnum {::aZ}
%: alnum {::09}
%: alnum_ {_}
%: alnum_ {::alnum}
// non white space characters
%: opaquechar {::specialchar}
%: opaquechar {::alnum}
%: anychar {::1wh}
%: anychar {::opaquechar}

%: ident {::alnum_}
%: ident {::alnum_::ident}

// generate rule that matches a string until `end` (if it has not been escaped with `esc`)
// does not escape matched string.
// usage: %!: `ruleName` = end with `end`, escape `esc`
// this generator uses the namespace `ruleName`_***
%: genRuleEndText {%!.:::nwh:ruleName:ident::nwh.=::nwh.end::nwh.with::nwh:end:anychar::nwh.,::nwh.escape::nwh:esc:anychar} {
    %: :ruleName {.:x.:anychar.:r.::ruleName.} {.:x.:r.}
    %: :ruleName {..:esc..:end.:r.::ruleName.} {..:esc..:end.:r.}
    %: :ruleName {..:end.} {.}
}

// process text that might contain generators (%!:) and execute the generators
%: 1generable {:x:anychar} {:x}
%: 1generable {:r:genRuleEndText} {:r}
%: generable {}
%: generable {:r:1generable:g:generable} {:r:g}
%: {:g:generable} {:g}

// function that escapes string
%/: escape {escape }

%/: {.;::nwh:text:braced_esctext} {:text};

%!: escTestRule = end with ), escape .

%: {:t:escTestRule} {success.: :t}testescape.))