%: init_swirl {}
%: init_swirl_0_1 {}
%: swirlcl (predefined) {::throw_predefined_rule}
%: print (print) {}
%: groups_swirl {}
%: 1wh {' `}
%: 1wh {'
`}
%: newline {'
`}
%: 0wh {}
%: nwh {}
%: nwh {::1wh::nwh}
%: 1nwh {::1wh::nwh}
%: whitespace {::1wh}
%: whitespaces {::1nwh}
%: anychar (any) {}
%: helper_first_character {:a:anychar:b:anychar} -> {:a}
%: helper_second_character {:a:anychar:b:anychar} -> {:b}
%: helper_quotes {'`}
%: az {a} %: az {b} %: az {c} %: az {d} %: az {e} %: az {f} %: az {g} %: az {h} %: az {i} %: az {j} %: az {k} %: az {l} %: az {m} %: az {n} %: az {o} %: az {p} %: az {q} %: az {r} %: az {s} %: az {t} %: az {u} %: az {v} %: az {w} %: az {x} %: az {y} %: az {z}
%: AZ {A} %: AZ {B} %: AZ {C} %: AZ {D} %: AZ {E} %: AZ {F} %: AZ {G} %: AZ {H} %: AZ {I} %: AZ {J} %: AZ {K} %: AZ {L} %: AZ {M} %: AZ {N} %: AZ {O} %: AZ {P} %: AZ {Q} %: AZ {R} %: AZ {S} %: AZ {T} %: AZ {U} %: AZ {V} %: AZ {W} %: AZ {X} %: AZ {Y} %: AZ {Z}
%: aZ {::az}
%: aZ {::AZ}
%: 09 {0} %: 09 {1} %: 09 {2} %: 09 {3} %: 09 {4} %: 09 {5} %: 09 {6} %: 09 {7} %: 09 {8} %: 09 {9}
%: specialchar {'!`}%: specialchar {'"`}%: specialchar {'#`}%: specialchar {'$`}%: specialchar {'%`}%: specialchar {'&`}%: specialchar {{''`}}%: specialchar {'(`}%: specialchar {')`}%: specialchar {'*`}%: specialchar {'+`}%: specialchar {',`}%: specialchar {'-`}%: specialchar {'.`}%: specialchar {'/`}%: specialchar {':`}%: specialchar {';`}%: specialchar {'<`}%: specialchar {'=`}%: specialchar {'>`}%: specialchar {'?`}%: specialchar {'@`}%: specialchar {'[`}%: specialchar {'\`}%: specialchar {']`}%: specialchar {'^`}%: specialchar {'_`}%: specialchar {{'``}}%: specialchar {'`}%: specialchar {'|`}%: specialchar {'~`}
%: alnum {::aZ}
%: alnum {::09}
%: alnum_ {_}
%: alnum_ {::alnum}
%: opaquechar {::not_whitespace::anychar}
%: not_whitespace (not) {::whitespace}
%: remove_newlines_comments {}
%: remove_newlines_comments {::not_end::remove_newline_comment::remove_newlines_comments}
%: remove_newline_comment {::anychar}
%: remove_newline_comment {::newline} -> {}
%: remove_newline_comment {::comment} -> {}
%: remove_newline_comment {//} -> {/}
%: comment (local)  {/::comment_inner/}
%: comment_inner (local)  {}
%: comment_inner_1  {::not_slash::anychar::comment_inner}
%: comment_inner {::comment_inner_1}
%: not_slash (not)  {/}
%: not_end (not) {'END_INIT`}
%: {::remove_newlines_comments}

%: uint {::09}
%: uint {::09::uint}

%: int {::uint}
%: int {+::nwh::uint}
%: int {-::nwh::uint}

%: float {::int}
%: float {::int.::uint}

%: index_number {::uint' `th} -> {:}
%: index_number {first} -> {1}
%: index_number {second} -> {2}
%: index_number {third} -> {3}

%: alnum_s {::alnum_}
%: alnum_s {::alnum_::alnum_s}

%: no_tail_opt {}

%: c_quote {"::c_quote_inner"}
%: c_quote_inner {}
%: c_quote_inner {::not_quote_end::anychar::c_quote_inner}
%: c_quote_inner {\:c:anychar:r:c_quote_inner}

%: c_quote_value {":inner:c_quote_inner_value"} -> {:inner}
%: c_quote_inner_value {}
%: c_quote_inner_value {::not_quote_end::anychar::c_quote_inner}
%: c_quote_inner_value {\:c:anychar:r:c_quote_inner::no_tail_opt} -> {:c'`:r}

%: not_quote_end (not) {"}

%: c_ident {::alnum_s}
%: swirl_ident {::alnum_s}

%: swirl_var {':`:a:swirl_ident}
%: swirl_rule_invocation {':`:a:swirl_ident':`:a:swirl_ident}

/ note to swirl: this pattern can be optimized easily and effectively. /
%: rest {}
%: rest {::anychar::rest}

%: -> {'
   %: `::cwd'//init//whitespace_handler.swirl 
`}

/warning: might not work/
%: not (not) (:r:rest) {:r}

%: until_space {}
%: until_space {::not_whitespace::anychar::until_space}

/this should be moved to metatime/
%: bake_rule(:name:alnum_s = maybe :r:rest) -> {
   %: :name {}
   %: :name :r
}

%: bake_rule(until_:name:alnum_s = until :r:rest) -> {
   %: until_:name (undefine) {}
   %: until_:name'_not` (undefine) {}
   %: until_:name {}
   %: until_:name {{'::until_`}:name'_not`'::anychar::until_`:name}  
   %: until_:name'_not` (not) {:r}
}

%: {::bake_rule(until_newline = until '::newline`)}
%: line_rest {::until_newline}

/ a wcomma is a string of the form \s*\,\s+ 
  and is not a usual comma.
  e.g. with this distinction the two punctuations have two different meanings:
  crab,goyle, have eaten. /
%: until_wcomma {::wcomma}
%: until_wcomma {::not_wcomma::anychar::until_wcomma}
%: not_wcomma (not) {::wcomma}
%: wcomma {::nwh,::1nwh}

%: __comment {
   this feature is not available since it uses tail-optimization on a rule which uses parameters, which is forbidden and will throw a panic.
}
%: balanced_string  (:begin:until_space{'`}' `:end:rest)
   {:begin'`::balanced_string_inner(:begin :end)'`:end}
%: balanced_string_inner(:b:until_space{'`}' `:e:rest) {}
%: balanced_string_inner(:b:until_space{'`}' `:e:rest)
   {:b'`::balanced_string_inner(:b :e)'`:e'`::balanced_string_inner(:b :e)}
%: balanced_string_inner(:b:until_space{'`}' `:e:rest)
   {::non_delimiter(:b :e)::balanced_string_inner(:b :e)}

%: balanced_curly {{::balanced_curly_inner}}
%: balanced_curly_inner {}
%: balanced_curly_inner {'{`::balanced_curly_inner'}`::balanced_curly_inner}
%: balanced_curly_inner {::not_brace::anychar::balanced_curly_inner}
%: not_brace {::not_brace_begin::not_brace_end}
%: not_brace_begin (not) {{'{`}}
%: not_brace_end (not) {{'}`}}

%: non_delimiter(:begin:until_space :end:until_space) {::not(:begin)::not(:end)}
%: non_delim_text(:begin:until_space :end:until_space) {::unimplemented}

%: copy(:x:rest) {} -> {:x}

%: throw (print) {::this_rule_promises_not_to_exist}
%: unimplemented {::throw}

%: print(:r:rest) {} -> {
   %: (print) {:r}
}

%: swirl_lib {//usr//local//lib//swirl//}

/ include metatime.swirl here /

%: init_deferred_meta_instructions {} -> {
   create namespace swirl.
   create namespace init.
}

/ define new syntax feature: work at block /

%: activate_rule(:feature:alnum_s) {} -> {
   ::_activate_rule_with_flag(:feature, (syntax))
}
%: activate_shallow_rule(:feature:alnum_s) {} -> {
   ::_activate_rule_with_flag(:feature, )
}

%: _activate_rule_with_flag(:feature_ident:alnum_s,:flag:rest) {} -> {
    %: init_use_feature_:feature_ident {}
    %: init_use_feature_:feature_ident {{'::`}:feature_ident'::init_use_feature_`:feature_ident}
    %: init_use_feature_:feature_ident {{'::init_not_`}:feature_ident'::anychar::init_use_feature_`:feature_ident}
    %: init_not_:feature_ident (not) {{'::`}:feature_ident}
    %: :flag {{'::init_use_feature_`}:feature_ident}
}

%: __experimenal__use_whitespace_handler(:handler:rest) {{:content:balanced_curly_inner}} -> {{'
   %: -> {{'
      %: {::define_whitespace_handler('`}`}:handler{'{'`)}
      `}`}:content{'{'
      %: {::define_whitespace_handler('`}::current_whitespace_handler{'`)}
   `}}
`}}

%: init_feature_redefine {
   %: (redefine) :rule_name:alnum_s
} -> {
   %: :rule_name (undefine) {}
   %: :rule_name
}

%: init_feature_redefine {
   '%::`::nwh:rule_name:alnum_s
} -> {
   %: (undefine) :rule_name {}
   %: :rule_name
}

%: {::activate_rule(init_feature_redefine)}

%: -> {'
   %: `::cwd'//quotation.swirl
`' `}

%: comment (undefine) {}
%: comment_inner (undefine) {}

%: {END_'`INIT} -> {} END_INIT
